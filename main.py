import os
import re
import json
import logging
import requests

from flask import Flask, request, jsonify
from telegram import Bot, Update, ParseMode
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters, CallbackContext
from web3 import Web3

# Thi·∫øt l·∫≠p logger chi ti·∫øt
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
API_BASESCAN = os.environ.get("API_BASESCAN")
BASESCAN_API_KEY = os.environ.get("BASESCAN_API_KEY")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
WEB3_PROVIDER_URL = os.environ.get("WEB3_PROVIDER_URL")

if not all([TELEGRAM_BOT_TOKEN, API_BASESCAN, BASESCAN_API_KEY, WEBHOOK_URL, WEB3_PROVIDER_URL]):
    logger.error("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng. Vui l√≤ng c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß.")
    exit(1)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot, None, use_context=True)

# Web3 & Contract ABI
w3 = Web3(Web3.HTTPProvider(WEB3_PROVIDER_URL))
try:
    with open("abi.json", "r") as f:
        abi = json.load(f)
    contract = w3.eth.contract(abi=abi)
    logger.info("‚úÖ ABI ƒë√£ ƒë∆∞·ª£c load.")
except Exception as e:
    logger.error(f"‚ùå L·ªói khi load ABI: {e}")
    exit(1)

app = Flask(__name__)

def get_creation_txhash(contract_address: str) -> str:
    try:
        logger.info(f"üîç ƒêang truy v·∫•n BaseScan ƒë·ªÉ l·∫•y txhash cho contract {contract_address}")
        url = f"{API_BASESCAN}/api"
        params = {
            "module": "contract",
            "action": "getcontractcreation",
            "contractaddresses": contract_address,
            "apikey": BASESCAN_API_KEY
        }
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        txhash = data.get("result", [{}])[0].get("txHash")
        logger.info(f"‚úÖ txhash t√¨m ƒë∆∞·ª£c: {txhash}")
        return txhash
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y txhash: {e}")
        return None

def get_transaction_data(txhash: str) -> dict:
    try:
        logger.info(f"üì¶ Truy v·∫•n th√¥ng tin giao d·ªãch cho txhash: {txhash}")
        url = f"{API_BASESCAN}/api"
        params = {
            "module": "proxy",
            "action": "eth_getTransactionByHash",
            "txhash": txhash,
            "apikey": BASESCAN_API_KEY
        }
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        logger.info("‚úÖ Giao d·ªãch ƒë√£ l·∫•y th√†nh c√¥ng.")
        return data.get("result", {})
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu giao d·ªãch: {e}")
        return {}

def decode_input_with_web3(input_hex: str):
    try:
        logger.info(f"üîì B·∫Øt ƒë·∫ßu decode input b·∫±ng Web3...")
        func_obj, func_args = contract.decode_function_input(input_hex)
        logger.info(f"‚úÖ ƒê√£ decode: function = {func_obj.fn_name}")
        return {"function": func_obj.fn_name, "args": func_args}
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi decode input: {e}")
        return None

def handle_message(update: Update, context: CallbackContext):
    try:
        message_text = update.message.text.strip()
        logger.info(f"üì® Tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c: {message_text}")

        if not re.match(r"^0x[a-fA-F0-9]{40}$", message_text):
            logger.warning("‚ö†Ô∏è Kh√¥ng ph·∫£i ƒë·ªãa ch·ªâ contract h·ª£p l·ªá.")
            return

        update.message.reply_text(f"ƒêang x·ª≠ l√Ω contract: `{message_text}`", parse_mode=ParseMode.MARKDOWN)

        txhash = get_creation_txhash(message_text)
        if not txhash:
            update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y txhash t·ª´ BaseScan.")
            return

        tx_data = get_transaction_data(txhash)
        if not tx_data:
            update.message.reply_text("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin giao d·ªãch.")
            return

        input_data = tx_data.get("input", "")
        if not input_data:
            update.message.reply_text("‚ùå Kh√¥ng c√≥ input data trong giao d·ªãch.")
            return

        logger.info(f"üîç Input Data Raw: {input_data[:20]}... (length: {len(input_data)})")

        decoded = decode_input_with_web3(input_data)
        if not decoded:
            update.message.reply_text("‚ùå L·ªói khi decode input data.")
            return

        if decoded["function"] != "deployToken":
            update.message.reply_text(f"‚ö†Ô∏è ƒê√¢y kh√¥ng ph·∫£i giao d·ªãch deployToken (function: {decoded['function']})")
            return

        deployment_config = decoded["args"].get("deploymentConfig")
        if not deployment_config:
            update.message.reply_text("‚ùå Kh√¥ng t√¨m th·∫•y deploymentConfig trong input.")
            return

        token_config = deployment_config.get("tokenConfig", {})
        rewards_config = deployment_config.get("rewardsConfig", {})

        name = token_config.get("name")
        symbol = token_config.get("symbol")
        image = token_config.get("image")
        metadata = token_config.get("metadata")
        context_raw = token_config.get("context")
        chain_id = token_config.get("originatingChainId")
        creator_reward_recipient = rewards_config.get("creatorRewardRecipient")

        # Parse JSON context v√† metadata n·∫øu c√≥
        try:
            metadata_json = json.loads(metadata)
        except:
            metadata_json = metadata

        try:
            context_json = json.loads(context_raw)
        except:
            context_json = context_raw

        reply = (
            f"üìå *Th√¥ng tin token deploy:*\n\n"
            f"*T√™n:* `{name}`\n"
            f"*K√Ω hi·ªáu:* `{symbol}`\n"
            f"*Chain ID:* `{chain_id}`\n"
            f"*Image:* [IPFS]({image})\n\n"
            f"*Metadata:*\n```json\n{json.dumps(metadata_json, ensure_ascii=False, indent=2)}\n```\n"
            f"*Context:*\n```json\n{json.dumps(context_json, ensure_ascii=False, indent=2)}\n```\n"
            f"*ID (click copy):* `{context_json.get('id', 'N/A')}`\n\n"
            f"*creatorRewardRecipient:* `{creator_reward_recipient}`"
        )

        update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)
        logger.info("‚úÖ Bot ƒë√£ tr·∫£ l·ªùi xong.")
    except Exception as e:
        logger.exception(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong handle_message: {e}")

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    try:
        update = Update.de_json(request.get_json(force=True), bot)
        dp.process_update(update)
        return jsonify({"ok": True})
    except Exception as e:
        logger.exception("‚ùå L·ªói x·ª≠ l√Ω webhook: %s", e)
        return jsonify({"ok": False}), 500

@app.route("/", methods=["GET"])
def index():
    return "ü§ñ Clanker Bot ƒëang ho·∫°t ƒë·ªông."

def main():
    bot.delete_webhook(drop_pending_updates=True)

    webhook_url = f"{WEBHOOK_URL}/{TELEGRAM_BOT_TOKEN}"
    bot.set_webhook(url=webhook_url)
    logger.info(f"‚úÖ Webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p: {webhook_url}")

    port = int(os.environ.get("PORT", 80))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()