import os
import re
import json
import logging
import requests

from flask import Flask, request, jsonify
from telegram import Bot, Update, ParseMode
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters, CallbackContext
from web3 import Web3

# Thi·∫øt l·∫≠p logger (ti·∫øng Vi·ªát)
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
API_BASESCAN = os.environ.get("API_BASESCAN")  # V√≠ d·ª•: "https://api.basescan.org"
BASESCAN_API_KEY = os.environ.get("BASESCAN_API_KEY")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")        # V√≠ d·ª•: "https://get-clank-production.up.railway.app"
WEB3_PROVIDER_URL = os.environ.get("WEB3_PROVIDER_URL")  # V√≠ d·ª•: "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID"

if not all([TELEGRAM_BOT_TOKEN, API_BASESCAN, BASESCAN_API_KEY, WEBHOOK_URL, WEB3_PROVIDER_URL]):
    logger.error("‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng. Vui l√≤ng c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß c√°c bi·∫øn: TELEGRAM_BOT_TOKEN, API_BASESCAN, BASESCAN_API_KEY, WEBHOOK_URL, WEB3_PROVIDER_URL")
    exit(1)

# Kh·ªüi t·∫°o bot v√† Dispatcher c·ªßa Telegram
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot, None, use_context=True)

# Kh·ªüi t·∫°o Web3 v√† load ABI t·ª´ file abi.json
w3 = Web3(Web3.HTTPProvider(WEB3_PROVIDER_URL))
try:
    with open("abi.json", "r") as f:
        abi = json.load(f)
    contract = w3.eth.contract(abi=abi)
    logger.info("‚úÖ ABI ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng.")
except Exception as e:
    logger.error(f"‚ùå L·ªói khi load ABI: {e}")
    exit(1)

# T·∫°o Flask app
app = Flask(__name__)

def get_creation_txhash(contract_address: str) -> str:
    """
    L·∫•y txhash c·ªßa giao d·ªãch t·∫°o contract t·ª´ BaseScan.
    Endpoint: ?module=contract&action=getcontractcreation&contractaddresses=<address>&apikey=...
    """
    try:
        logger.info(f"üîç ƒêang truy v·∫•n BaseScan ƒë·ªÉ l·∫•y txhash cho contract {contract_address}")
        url = f"{API_BASESCAN}/api"
        params = {
            "module": "contract",
            "action": "getcontractcreation",
            "contractaddresses": contract_address,
            "apikey": BASESCAN_API_KEY
        }
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        results = data.get("result", [])
        if not results or not isinstance(results, list):
            logger.error(f"‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ cho contract {contract_address}")
            return None
        txhash = results[0].get("txHash")
        logger.info(f"‚úÖ txhash t√¨m ƒë∆∞·ª£c: {txhash}")
        return txhash
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y txhash: {e}")
        return None

def get_transaction_data(txhash: str) -> dict:
    """
    L·∫•y th√¥ng tin giao d·ªãch t·ª´ BaseScan theo txhash.
    Endpoint: ?module=proxy&action=eth_getTransactionByHash&txhash=<txhash>&apikey=...
    """
    try:
        logger.info(f"üì¶ ƒêang truy v·∫•n th√¥ng tin giao d·ªãch cho txhash: {txhash}")
        url = f"{API_BASESCAN}/api"
        params = {
            "module": "proxy",
            "action": "eth_getTransactionByHash",
            "txhash": txhash,
            "apikey": BASESCAN_API_KEY
        }
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        logger.info("‚úÖ Th√¥ng tin giao d·ªãch ƒë√£ ƒë∆∞·ª£c l·∫•y.")
        return data.get("result", {})
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu giao d·ªãch: {e}")
        return {}

def decode_input_with_web3(input_hex: str):
    """
    S·ª≠ d·ª•ng Web3.py ƒë·ªÉ decode input data theo ABI c·ªßa h√†m deployToken.
    Tr·∫£ v·ªÅ dict v·ªõi function name v√† decoded arguments.
    """
    try:
        logger.info("üîì B·∫Øt ƒë·∫ßu decode input data v·ªõi Web3...")
        func_obj, func_args = contract.decode_function_input(input_hex)
        logger.info(f"‚úÖ Decode th√†nh c√¥ng. Function: {func_obj.fn_name}")
        return {"function": func_obj.fn_name, "args": func_args}
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi decode input: {e}")
        return None

def handle_message(update: Update, context: CallbackContext):
    try:
        message_text = update.message.text.strip()
        logger.info(f"üì® Tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c: {message_text}")

        if not re.match(r"^0x[a-fA-F0-9]{40}$", message_text):
            logger.warning("‚ö†Ô∏è Tin nh·∫Øn kh√¥ng ph·∫£i l√† ƒë·ªãa ch·ªâ contract h·ª£p l·ªá.")
            return

        # Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Anh
        update.message.reply_text(f"Processing contract: `{message_text}`", parse_mode=ParseMode.MARKDOWN)
        txhash = get_creation_txhash(message_text)
        if not txhash:
            update.message.reply_text("Could not find txhash from BaseScan.")
            return

        tx_data = get_transaction_data(txhash)
        if not tx_data:
            update.message.reply_text("Failed to retrieve transaction data from BaseScan.")
            return

        input_data_raw = tx_data.get("input", "")
        if not input_data_raw:
            update.message.reply_text("No input data found in the transaction.")
            return

        logger.info(f"üîç Input data raw (first 20 chars): {input_data_raw[:20]}... (length: {len(input_data_raw)})")

        decoded = decode_input_with_web3(input_data_raw)
        if not decoded:
            update.message.reply_text("Error decoding input data.")
            return

        if decoded.get("function") != "deployToken":
            update.message.reply_text(f"This is not a deployToken transaction (function: {decoded.get('function')}).")
            return

        deployment_config = decoded.get("args", {}).get("deploymentConfig")
        if not deployment_config:
            update.message.reply_text("deploymentConfig not found in the input data.")
            return

        token_config = deployment_config.get("tokenConfig", {})
        rewards_config = deployment_config.get("rewardsConfig", {})

        name = token_config.get("name")
        symbol = token_config.get("symbol")
        image = token_config.get("image")
        chain_id = token_config.get("originatingChainId")
        creator_reward_recipient = rewards_config.get("creatorRewardRecipient")

        # X·ª≠ l√Ω context: t√°ch t·ª´ng item ra m·ªôt d√≤ng, hi·ªÉn th·ªã c√°c m·ª•c kh√¥ng r·ªóng.
        context_raw = token_config.get("context")
        try:
            context_json = json.loads(context_raw)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to parse context JSON: {e}")
            context_json = {"context": context_raw}

        context_lines = []
        if isinstance(context_json, dict):
            for key, value in context_json.items():
                if value and str(value).strip():
                    if key == "messageId":
                        # N·∫øu messageId kh√¥ng r·ªóng v√† c√≥ URL th√¨ hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng hyperlink
                        context_lines.append(f"{key}: [Link]({value})")
                    else:
                        context_lines.append(f"{key}: {value}")
        else:
            context_lines.append(str(context_json))
        context_formatted = "\n".join(context_lines)

        reply = (
            f"*Token Deployment Information:*\n\n"
            f"*Name:* `{name}`\n"
            f"*Symbol:* `{symbol}`\n"
            f"*Chain ID:* `{chain_id}`\n"
            f"*Image:* [Link]({image})\n\n"
            f"*Context:*\n{context_formatted}\n\n"
            f"*Creator Reward Recipient:* `{creator_reward_recipient}`"
        )

        update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)
        logger.info("‚úÖ Bot has responded successfully.")
    except Exception as e:
        logger.exception(f"‚ùå Unhandled error in handle_message: {e}")

def start_command(update: Update, context: CallbackContext):
    update.message.reply_text("Bot is ready. Please send a token contract address to process.")

# Th√™m handler v√†o Dispatcher
dp.add_handler(CommandHandler("start", start_command))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    try:
        data = request.get_json(force=True)
        logger.info(f"üì® Received update from Telegram: {data}")
        update_obj = Update.de_json(data, bot)
        dp.process_update(update_obj)
        return jsonify({"ok": True})
    except Exception as e:
        logger.exception(f"‚ùå Error processing webhook: {e}")
        return jsonify({"ok": False}), 500

@app.route("/", methods=["GET"])
def index():
    return "ü§ñ Clanker Bot is running (Flask webhook)."

def main():
    # X√≥a webhook c≈©
    bot.delete_webhook(drop_pending_updates=True)
    # Thi·∫øt l·∫≠p webhook m·ªõi v·ªõi domain c√¥ng khai
    hook_url = f"{WEBHOOK_URL}/{TELEGRAM_BOT_TOKEN}"
    if not bot.set_webhook(url=hook_url):
        logger.error("‚ùå Failed to set webhook with Telegram.")
        exit(1)
    logger.info(f"‚úÖ Webhook has been set: {hook_url}")

    port = int(os.environ.get("PORT", 80))
    logger.info(f"üöÄ Starting Flask server on port {port}...")
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()